
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 259
#define YY_END_OF_BUFFER 260
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1174] =
    {   0,
        0,    0,  260,  257,  257,  258,  257,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  256,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  255,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  113,    0,  114,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  117,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  115,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  204,    4,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  203,    0,    0,    0,

        0,    0,    0,    3,    0,    0,    0,    0,    0,  137,
        0,    0,    0,  201,  183,    0,    0,    0,  138,    0,
        0,    0,    0,    0,    0,    0,    0,  193,    0,    0,
        0,    0,    0,    0,    0,  141,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  139,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  254,    0,  253,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,  123,    0,
        0,   53,    0,    0,    0,    0,  108,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  122,    0,  124,  118,
        0,    0,    0,  120,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        2,  192,  191,    0,    0,    0,    0,    0,    0,    0,
        0,  194,    0,    0,    0,  148,    0,    0,    0,    0,
        0,  195,    0,    0,    0,    0,   21,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  132,   85,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  196,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  220,  237,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,   17,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  147,  153,    0,
        0,    0,    0,    0,  149,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   19,    0,  142,  238,    0,    0,
        0,    0,    0,    0,   18,    0,  198,    0,  205,    0,

      185,    0,    0,    0,  206,    0,    0,  145,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       13,    0,    0,    0,    0,   10,    0,    0,  236,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   41,  103,    0,    0,    0,    0,    0,    0,    0,
       48,    0,    0,    0,    0,  110,   52,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   59,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   65,    0,
      229,  107,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   73,    0,  127,    0,  154,    0,    0,    7,

      230,    0,  199,   14,    0,    0,  174,    0,  168,    0,
        0,    0,    0,    0,    0,    0,  233,  232,    0,    0,
       80,  252,    0,  101,    0,    0,    0,    0,    0,  175,
      169,    0,    0,    0,    0,    0,    0,    0,    0,  134,
        0,  181,   84,    0,  171,    0,  218,    0,  165,    0,
        0,    0,    0,    0,    0,   20,    0,    0,    0,    0,
        0,    5,    0,    0,  207,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   15,   31,    0,    0,    0,   91,
       27,  177,    0,  212,    0,    0,    0,  184,  189,    1,
      173,    0,  219,    0,  167,    0,    0,  162,    0,    0,

        0,    0,    0,  213,   12,    0,    0,  208,   30,   23,
       24,  209,    0,    0,    0,    0,    0,    0,    0,    0,
      172,    0,  166,    0,    0,    0,    0,   97,    0,    0,
      100,  131,  235,    0,    0,    0,    0,   43,    0,   39,
        0,  102,   42,    0,    0,    0,  105,    0,   47,    0,
        0,  104,    0,   51,    0,  111,    0,    0,  225,    0,
       57,    0,  125,    0,    0,    0,  157,    0,  119,   67,
      109,    0,   64,    0,    0,    0,    0,   71,   25,   75,
        0,    0,  126,   74,  200,    0,  246,    0,    0,   29,
      222,  170,    0,    0,  129,  224,    0,    0,   79,    0,

      179,    0,  202,  178,    0,    0,    0,    0,  159,  128,
        0,    0,    0,   83,    6,    0,  161,  190,    0,  135,
        0,   16,  214,  244,    0,    0,    0,  241,  240,   26,
        0,  186,  180,  239,  182,    0,    0,   89,  226,    0,
      158,  150,    0,  210,    0,    0,    0,    0,    0,    8,
      156,  188,   32,  215,  245,    0,    0,  242,  243,    0,
      144,    0,    0,   68,    0,  133,    0,    0,   99,  231,
       60,  163,    0,   96,    0,  152,    0,    0,    0,    0,
        0,    0,    0,   38,   37,   40,   44,  248,   46,   45,
        0,   50,   49,  112,   54,   56,   55,    0,   61,   58,

      227,   63,   62,    0,   66,   70,   69,    0,   72,   11,
       76,    9,  247,   92,   78,   77,    0,  176,   34,   33,
       35,  223,  155,   82,   81,   36,  136,  216,  187,  250,
       28,   86,   88,   87,    0,   93,   90,  211,  249,   22,
      217,  251,  228,  143,  221,  197,    0,  234,   95,   94,
        0,  160,   98,    0,    0,    0,    0,  106,  116,  121,
      164,  130,  140,    0,  146,    0,    0,    0,  151,  255,
      254,  253,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    3,    1,    1,    4,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    5,    6,    7,
        8,    9,    5,    5,    5,    5,    5,    1,   10,    1,
        1,    1,    1,    1,   11,   12,   13,   14,   15,   16,
       17,   18,   19,    1,   20,   21,   22,   23,   24,   25,
        1,   26,   27,   28,   29,    1,    1,   30,   31,   32,
        1,    1,    1,    1,    1,    1,   33,   34,   35,   36,

       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,   48,   49,   50,   51,   52,   53,   54,   55,   56,
       57,   58,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[59] =
    {   0,
        1,    1,    1,    2,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[1185] =
    {   0,
        0,    1, 2076,    0,    0,    5,    0, 2065,   59,  106,
       60,   61,   62,   65,   69,   72,   70,   73,   67,   71,
      150,  102,   68,   99,  104,  116,  120,  121,  125,  194,
      156,  238,  157,  282,   82,  147,  177,  329,   77,  373,
      172,  416,  460,  504,   74,  546,  588,  201,  248,  126,
      136,  138,  160, 2064, 2077,  211,  642,  676,  128,  197,
      137,  123,  176,  171,  212,  190,  213,  218,  216,  227,
      186,   76,  226,  233,  239,  244,  253,  252,  254,  242,
      257,  240,  250,  258,  246,  259, 2063,  266, 2062,  262,
      270,  299,  260,  304,  274,  301,  298,  303, 2061,  306,

      309,  290,  313,  310,   64,  302,  314,  319,  312,  315,
      316,  326, 2060,  322,  342,  338,  323,  350,  349,  346,
      351,  353,  359,  363,  360,  371,  362,  367,  369,  375,
      384,  379,  376,  395,  392,  382,  387,  390,  404,  408,
      405,  409,  432,  412,  425,  420,  424,  429,  433,  434,
      436,  454,  441,  437,  455,  465,  463,  462, 2059, 2058,
      469,  471,  473,  488,  490,  472,  480,  491,  482,  506,
      493,  499,  508,  478,  512,  515,  522,  517, 2057,  519,
      533,  523,  540, 2056,  532,  537,  539, 2055,  542,  526,
      559, 2054, 2053,  528,  525,  561, 2052,  577,  562,  583,

      584,  585,  594,  586,  596,  589,  597,  595,  609,  610,
      598,  590,  608,  611,  627,  601,  652,  653,  683,  606,
      655,  661,  657,  659,  600,  685,  656,  663,  660,  662,
      688,  676,  692,  706,  698,  707,  712,  713,  710,  714,
      717,  720,  716,  718,  721,  725,  727, 2051,  728,  729,
      726,  731,  734, 2050,  779, 2077,  785,  819,  736,  755,
      759,  740,  738,  764,  737,  769,  772,  801, 2049,  797,
      792, 2048,  793,  828,  806,  802, 2047,  796,  804,  794,
      831,  832,  835,  807,  838,  840, 2077,  848, 2077,  849,
      850,  851,  852,  854,  853,  856,  860,  861, 2046, 2077,

      857, 2045, 2044,  859,  862,  591, 2043,  863,  865,  866,
      867,  869,  870, 2077,  872,  873,  886,  874,  881,  877,
      885,  887,  884,  888, 2042, 2041, 2040,  889,  896,  898,
      901,  902,  903,  913,  914, 2039,  920,  911,  922, 2038,
      924,  923,  927,  928,  929, 2037,  930,  933,  934,  936,
     2036,  938,  939,  940,  941,  943,  944,  950,  951,  952,
      954,  955, 2035, 2034,  953,  957,  958,  960,  959,  966,
      961, 2077, 2077,  962,  965,  968,  972,  977,  978,  979,
      993,  981,  995, 2033,  998,  997, 1000, 1001, 1003, 1009,
     1013, 1011, 1012, 1014, 1015, 1017, 2077, 1019, 1022, 2032,

     2031, 1023, 1025, 2077, 1027, 1028, 1030, 1031, 1029, 2077,
     1032, 1033, 1034, 2077, 2077, 1042, 1039, 1043, 2077, 1038,
     1044, 1047, 1051, 1050, 1053, 1058, 1048, 2077, 1052, 1065,
     1059, 1061, 1076, 1079, 2030, 2077, 2029, 1064, 1085, 1089,
     1090, 2028, 1092, 1096, 1098, 1097, 1100, 1101, 1102, 1103,
     1104, 2027, 1107, 2026, 2025, 1106, 1108, 1109, 1110, 1111,
     1112, 2024, 1113, 2023, 1123, 1115, 2022, 1159, 1127, 2021,
     1120, 1125, 1130, 1137, 1139, 1147, 1131, 1122, 1132, 1135,
     1164, 2020, 1167, 1140, 1168, 2077, 1169, 2019, 1176, 1177,
     2018, 1179, 2017, 1185, 1218, 2077, 1252, 2077, 1178, 1188,

     1201, 1189, 1202, 1199, 1203, 2016, 2015, 1196, 2077, 1204,
     1209, 2077, 1192, 1235, 1193, 1205, 2077, 2014, 1236, 1240,
     1238, 1261, 2013, 2012, 1262, 1264, 1265, 1266, 1267, 1268,
     1269, 1271, 1270, 1273, 1272, 2011, 2077, 1274, 2077, 2077,
     1281, 1283, 1284, 2077, 1288, 1286, 1287, 1289, 1292, 2010,
     1296, 2009, 2008, 1299, 1300, 1302, 1303, 1304, 1308, 1307,
     2077, 2077, 2077, 1315, 1316, 1317, 2007, 1319, 2006, 1322,
     2005, 2077, 1320, 1321, 2004, 2077, 2003, 1323, 2002, 2001,
     1327, 2077, 1331, 2000, 1334, 1999, 2077, 1324, 1335, 1336,
     1337, 1340, 1339, 1342, 1998, 1997, 1346, 1350, 2077, 2077,

     1996, 1995, 1353, 1994, 1352, 1370, 1357, 1359, 1993, 1992,
     1360, 1369, 1363, 1371, 1372, 1373, 1374, 1375, 2077, 1991,
     1377, 1990, 1989, 1381, 1988, 1384, 1987, 1378, 1986, 1385,
     1387, 1388, 1390, 2077, 2077, 1392, 1393, 1985, 1397, 1399,
     1403, 1398, 1409, 1984, 1407, 2077, 1408, 1983, 1412, 1413,
     1416, 1414, 1420, 1421, 1422, 1423, 1426, 1982, 1981, 1428,
     1433, 1429, 1980, 1979, 1978, 1434, 1977, 2077, 2077, 1442,
     1446, 1447, 1976, 1975, 2077, 1974, 1973, 1450, 1972, 1449,
     1971, 1451, 1452, 1970, 2077, 1453, 2077, 2077, 1454, 1457,
     1458, 1461, 1969, 1968, 2077, 1460, 2077, 1466, 2077, 1967,

     2077, 1966, 1965, 1964, 2077, 1963, 1462, 2077, 1473, 1476,
     1468, 1470, 1478, 1471, 1480, 1962, 1479, 1961, 1488, 1481,
     2077, 1484, 1960, 1482, 1487, 2077, 1959, 1958, 2077, 1957,
     1956, 1535, 1541, 1575, 1955, 1492, 1954, 1496, 1953, 1952,
     1501, 2077, 2077, 1515, 1508, 1951, 1524, 1950, 1526, 1517,
     2077, 1949, 1555, 1948, 1556, 2077, 2077, 1947, 1504, 1557,
     1946, 1558, 1945, 1559, 1944, 1550, 1560, 1561, 2077, 1943,
     1516, 1942, 1941, 1940, 1562, 1939, 1591, 1592, 2077, 1593,
     2077, 2077, 1594, 1938, 1937, 1936, 1595, 1563, 1935, 1934,
     1933, 1596, 2077, 1932, 2077, 1597, 2077, 1604, 1931, 2077,

     2077, 1930, 2077, 2077, 1929, 1605, 2077, 1606, 2077, 1928,
     1927, 1607, 1608, 1926, 1609, 1925, 2077, 2077, 1611, 1924,
     2077, 2077, 1923, 2077, 1613, 1615,   81, 1922, 1921, 2077,
     2077, 1616, 1617, 1624, 1920, 1919, 1625, 1918, 1917, 2077,
     1619, 2077, 2077, 1916, 2077, 1626, 2077, 1915, 2077, 1914,
     1913, 1627, 1628, 1631, 1912, 2077, 1911, 1910, 1630, 1909,
     1908, 2077, 1907, 1906, 2077, 1632, 1633, 1905, 1904, 1639,
     1903, 1902, 1640, 1901, 2077, 2077, 1643, 1642, 1644, 2077,
     2077, 2077, 1645, 2077, 1650, 1900, 1899, 2077, 2077, 2077,
     2077, 1898, 2077, 1897, 2077, 1896, 1895, 2077, 1653, 1654,

     1894, 1893, 1656, 2077, 2077, 1662, 1658, 2077, 2077, 2077,
     2077, 2077, 1892,  604, 1663, 1664, 1891, 1890, 1889, 1888,
     2077, 1671, 2077, 1887, 1674, 1886, 1675, 2077, 1665, 1678,
     2077, 2077, 2077, 1885, 1711, 1718, 1752, 2077, 1884, 2077,
     1883, 2077, 2077, 1882, 1881, 1880, 2077, 1879, 2077, 1878,
     1689, 2077, 1877, 2077, 1876, 2077, 1853, 1842, 2077, 1841,
     2077, 1840, 2077, 1694, 1839, 1838, 2077, 1837, 2077, 2077,
     2077, 1836, 2077, 1835, 1695, 1834, 1833, 2077, 2077, 2077,
     1832, 1697, 2077, 2077, 2077, 1831, 2077, 1830, 1829, 2077,
     2077, 2077, 1828, 1827, 2077, 2077, 1808, 1807, 2077, 1806,

     2077, 1700, 2077, 2077, 1805, 1774, 1773, 1771, 2077, 2077,
     1763, 1761, 1760, 2077, 2077, 1759, 2077, 2077, 1740, 2077,
     1739, 2077, 2077, 2077, 1738, 1735, 1734, 2077, 2077, 2077,
     1733, 2077, 2077, 2077, 2077, 1729, 1696, 2077, 2077, 1688,
     2077, 2077, 1726, 2077, 1687, 1684, 1683, 1682, 1681, 2077,
     2077, 2077, 2077, 2077, 2077, 1676, 1520, 2077, 2077, 1511,
     2077, 1510, 1503, 2077, 1502, 2077, 1680, 1208, 2077, 2077,
     2077, 2077, 1206, 2077, 1197, 2077, 1728, 1194, 1191, 1190,
     1770, 1786, 1820, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     1119, 2077, 2077, 2077, 2077, 2077, 2077,  805, 2077, 2077,

     2077, 2077, 2077,  746, 2077, 2077, 2077,  745, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077,  605, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077,  599, 2077, 2077, 2077, 2077, 2077,
     2077, 2077, 2077, 2077, 2077, 2077, 1737, 2077, 2077, 2077,
      529, 2077, 2077,  452, 1798,  444,  169, 2077, 2077, 2077,
     2077, 2077, 2077,  166, 2077, 1804,   75,   66, 2077, 2077,
     2077, 2077, 2077, 1858, 1861, 1864, 1867, 1870, 1873, 1876,
     1879, 1882,   70,   12
    } ;

static yyconst flex_int16_t yy_def[1185] =
    {   0,
     1174, 1174, 1173, 1175, 1175, 1173, 1175, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176, 1176,
     1176, 1176, 1176, 1177, 1173, 1177, 1177,   57, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,

     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,

     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177, 1177,
     1177, 1177, 1177, 1178, 1178, 1173, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1173, 1178, 1173, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1173,

     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1173, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1173, 1173, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1173, 1178, 1178, 1178,

     1178, 1178, 1178, 1173, 1178, 1178, 1178, 1178, 1178, 1173,
     1178, 1178, 1178, 1173, 1173, 1178, 1178, 1178, 1173, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1173, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1173, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178,
     1178, 1178, 1178, 1178, 1178, 1173, 1178, 1178, 1178, 1178,
     1178, 1178, 1179, 1179, 1179, 1173, 1179, 1173, 1179, 1179,

     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1173, 1179,
     1179, 1173, 1179, 1179, 1179, 1179, 1173, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1173, 1179, 1173, 1173,
     1179, 1179, 1179, 1173, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1173, 1173, 1173, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1173, 1179, 1179, 1179, 1173, 1179, 1179, 1179, 1179,
     1179, 1173, 1179, 1179, 1179, 1179, 1173, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1173, 1173,

     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1173, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1173, 1173, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1173, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1173, 1173, 1179,
     1179, 1179, 1179, 1179, 1173, 1179, 1179, 1179, 1179, 1179,
     1179, 1179, 1179, 1179, 1173, 1179, 1173, 1173, 1179, 1179,
     1179, 1179, 1179, 1179, 1173, 1179, 1173, 1179, 1173, 1179,

     1173, 1179, 1179, 1179, 1173, 1179, 1179, 1173, 1179, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179,
     1173, 1179, 1179, 1179, 1179, 1173, 1179, 1179, 1173, 1179,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1173, 1173, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1173, 1180, 1180, 1180, 1180, 1173, 1173, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1173, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1173, 1180,
     1173, 1173, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1173, 1180, 1173, 1180, 1173, 1180, 1180, 1173,

     1173, 1180, 1173, 1173, 1180, 1180, 1173, 1180, 1173, 1180,
     1180, 1180, 1180, 1180, 1180, 1180, 1173, 1173, 1180, 1180,
     1173, 1173, 1180, 1173, 1180, 1180, 1180, 1180, 1180, 1173,
     1173, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1173,
     1180, 1173, 1173, 1180, 1173, 1180, 1173, 1180, 1173, 1180,
     1180, 1180, 1180, 1180, 1180, 1173, 1180, 1180, 1180, 1180,
     1180, 1173, 1180, 1180, 1173, 1180, 1180, 1180, 1180, 1180,
     1180, 1180, 1180, 1180, 1173, 1173, 1180, 1180, 1180, 1173,
     1173, 1173, 1180, 1173, 1180, 1180, 1180, 1173, 1173, 1173,
     1173, 1180, 1173, 1180, 1173, 1180, 1180, 1173, 1180, 1180,

     1180, 1180, 1180, 1173, 1173, 1180, 1180, 1173, 1173, 1173,
     1173, 1173, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180,
     1173, 1180, 1173, 1180, 1180, 1180, 1180, 1173, 1180, 1180,
     1173, 1173, 1173, 1181, 1181, 1181, 1181, 1173, 1181, 1173,
     1181, 1173, 1173, 1181, 1181, 1181, 1173, 1181, 1173, 1181,
     1181, 1173, 1181, 1173, 1181, 1173, 1181, 1181, 1173, 1181,
     1173, 1181, 1173, 1181, 1181, 1181, 1173, 1181, 1173, 1173,
     1173, 1181, 1173, 1181, 1181, 1181, 1181, 1173, 1173, 1173,
     1181, 1181, 1173, 1173, 1173, 1181, 1173, 1181, 1181, 1173,
     1173, 1173, 1181, 1181, 1173, 1173, 1181, 1181, 1173, 1181,

     1173, 1181, 1173, 1173, 1181, 1181, 1181, 1181, 1173, 1173,
     1181, 1181, 1181, 1173, 1173, 1181, 1173, 1173, 1181, 1173,
     1181, 1173, 1173, 1173, 1181, 1181, 1181, 1173, 1173, 1173,
     1181, 1173, 1173, 1173, 1173, 1181, 1181, 1173, 1173, 1181,
     1173, 1173, 1181, 1173, 1181, 1181, 1181, 1181, 1181, 1173,
     1173, 1173, 1173, 1173, 1173, 1181, 1181, 1173, 1173, 1181,
     1173, 1181, 1181, 1173, 1181, 1173, 1181, 1181, 1173, 1173,
     1173, 1173, 1181, 1173, 1181, 1173, 1181, 1181, 1181, 1182,
     1182, 1182, 1182, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1182, 1173, 1173, 1173, 1173, 1173, 1173, 1182, 1173, 1173,

     1173, 1173, 1173, 1182, 1173, 1173, 1173, 1182, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1182, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1182, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1182, 1173, 1173, 1173,
     1182, 1173, 1173, 1173, 1173, 1183, 1184, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1183, 1184, 1173, 1173,
     1173, 1173,    0, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173
    } ;

static yyconst flex_int16_t yy_nxt[2136] =
    {   0,
     1173,    5,    5,    6,    6,    8,    8,    9,    8,    8,
        8,    8,    8,    8, 1168,   10,   11,   12,   13,   14,
        8,   15,    8,   16,   17,   18,   19,   20,   21,   22,
       23,   24,   25,   26,   27,   28,   29,   30,   31,   32,
       33,   34,   35,   36,   37,   38,    8,   39,   40,   41,
       42,   43,   44,   45,   46,   47,   48,   49,    8,   50,
       51,   52,   53,   56,   56,   56,   56,   56,   55,   55,
       55,   55, 1167,   55,   55, 1172,   55,   55,   55,   55,
       55,   55,   55,   55, 1171,   55,   55,  306,   57, 1008,
       55,   55,   72,  272,   70,   68,   67,   73,   71,   74,

       69,   79,   85,   75,   80,   86,   81,  102,   55,  174,
       82,   55,   76,   55,   58,   55,   77,   78,   83,   87,
       59,  105,   88,   89,   84,   55,  217,  155,  156,   55,
       55,  157,   55,  103,   55,   55,  106,   55,   60,  104,
       61,   98,   99,  107,   62,   55,   55,   55,  108,   63,
      109,  100,  101,  114,  110,   64,   55,   65,   66,   55,
      113,  116,  247,  111,   90,   55,   55,  141,  112,   55,
      249,  259,  262,  115,  250, 1169,  248,  261,  498,  158,
       55,   55,   91,  159,   92,   55,   55,  161,   93,  142,
      251,  128,  129,  143,   94,   55,  252,  144,  160,   55,

       95,   96,   97,   55,  185,  130,   55,  186,  131,  162,
       55,  264,  187,  163,  253,  255,  255,  255,  255,  255,
      256,   55,   55,  263,  188,   55,  117,   55,  118,  271,
      119,  260,  120,  236,  266,   55,   55,  121,  122,  123,
      237,  238,   55,  124,  125,  126,  127,   55,   55,   55,
      239,   55,  265,   55,  268,   55,  269,   55,  240,   55,
      273,   55,   55,   55,  267,  270,   55,   55,   55,   55,
      132,   55,  133,  274,  134,   55,  280,  135,  136,   55,
      241,  137,  242,   55,  138,  277,  243,  139,  275,  282,
      140,   55,  244,  285,  276,  245,  278,  281,  279,   55,

      246,  283,  284,  286,  291,  290,  288,   55,   55,  293,
       55,   55,   55,   55,  145,   55,  146,  296,   55,   55,
      147,   55,   55,   55,   55,   55,  148,  149,   55,  150,
      151,   55,   55,  152,  153,   55,  303,  154,   55,  292,
      294,  297,  298,  299,  295,  304,  301,   55,  305,  302,
      308,   55,  310,  309,  307,   55,  315,  318,   55,   55,
       55,  164,   55,  165,  311,  166,  312,  167,   55,   55,
      313,   55,   55,  168,  169,  170,   55,  171,   55,  172,
       55,  173,   55,  175,   55,   55,  316,  323,   55,  317,
      319,   55,  321,   55,  326,  322,   55,  327,  324,   55,

      325,   55,  320,  328,   55,  176,  331,  177,  178,  179,
      180,  330,  337,   55,   55,  332,  329,   55,   55,  181,
      333,   55,  182,  183,  184,   55,  336,  335,  334,   55,
      338,  341,  340,   55,   55,  343,  345,  344,   55,  342,
      339,   55,   55,   55,  353,   55,   55,  349,  189,  190,
       55,  191,  192,  496,  348,  346,  193,  347,  350,  355,
      356,   55,  194,   55,   55,  354,  195,  196,  197,   55,
      351,   55,   55,  357,   55,  352,  358,  367,   55,  359,
       55,   55,   55,  360,  361,  365,  363,   55,  362,   55,
      366,   55,  198,  364,  199,  370,  200,   55,  201,   55,

       55,  368,   55,  202,  203,  376,  371,  204,   55,  205,
      206,  207,  208,   55,  369,   55,  377,   55,  374,  383,
      375,   55,  378,  382,   55,  389,   55,  380,   55,  381,
      379,   55,   55,  384,   55,   55,  209,   55, 1165,  387,
      210,   55,   55,  211,  212,  386,   55,  213,   55,   55,
      214,   55,  388,  215,  216,   55,  218,  385,  395,  391,
      392,  390,  398,  393,  394,  396,  405,  401,   55,  406,
       55,   55,  402,  407,  408,  411,  412,  417,  219,  416,
      220,  221,  222,  223,  409,  224,   55,  399,  403,  225,
      400,  413,   55,   55,   55,   55,  226,   55,   55,  436,

       55,  418,  421,   55,   55,  428,   55,   55, 1163,   55,
       55,  420, 1065,   55, 1162,   55,  543,   55,   55,   55,
       55,  227,  228,  229,  230,  424,  422,  231,  232,  427,
      425,  429,  430,  423,  426,  233,   55,  431,  435,  432,
      234,  442,  449,  437,  455,  235,  257,  257,  257,  257,
      257,   55,  257,  257,  257,  257,  257,  257,  433,  434,
      438,   55,   55,  439,   55,   55,   55,  440,   55,   55,
       55,   55,   55,  441,  257,  257,  257,  257,  257,  257,
      258,  258,  258,  258,  258,   55,  258,  258,  258,  258,
      258,  258,   55,  451,   55,  459,  461,   55,  443,  452,

      453,   55,  444,  450,  458,  454,  460,   55,  258,  258,
      258,  258,  258,  258,  463,   55,   55,  456,  445,   55,
      464,   55,   55,   55,  465,   55,   55,   55,  446,   55,
       55,  447,  448,  457,   55,   55,   55,   55,   55,  466,
       55,  469,  476,   55,  462,   55,   55,   55,  471,   55,
      467,  478,  472,  468, 1161, 1160,  474,  475,  473,  470,
      480,  482,  487,  477,   55,  481,  479,  485,   55,  484,
      489,  483,  502,   55,  488,  491,  499,  503,   55,  492,
      505,   55,  490,  494,  494,  494,  494,  494,  256,  495,
      495,  495,  495,  495,  496,  495,  495,  495,  495,  495,

      495,   55,   55,   55,  507,   55,   55,  500,  501,  504,
       55,   55,  506,   55, 1159,   55,   55,  495,  495,  495,
      495,  495,  495,  497,  497,  497,  497,  497,  498,  497,
      497,  497,  497,  497,  497,  510,  508,   55,  515,  518,
       55,   55,  516,  511,   55,  513,  520,   55,  519,   55,
      524,  497,  497,  497,  497,  497,  497,   55,   55,   55,
       55,   55,   55,   55,  522,   55,   55,  523,   55,   55,
       55,   55,   55,  526,   55,   55,   55,  514,   55,   55,
      521,   55,   55,   55,  531,  525,   55,  533,  534,  528,
       55,  527,  532,   55,   55,   55,   55,   55,   55,  548,

      530,  538,  529,  535,  536,   55,  542,   55,  541,  549,
       55,   55,   55,  550,  545,  547,  552,  546,  553,  558,
       55,  559,   55,   55,  551,  557,  554,  560,  556,   55,
      555,   55,   55,   55,  564,  569,   55,   55,   55,   55,
      565,  566,   55,   55,  567,   55,  570,   55,   55,   55,
       55,  574,   55,   55,  568,  573,  578,  571,  577,   55,
       55,   55,   55,   55,   55,  579,   55,   55,   55,   55,
       55,   55,  585,  575,   55,   55,  593,   55,  581,  583,
      590,   55,  584,  589,  580,  586,   55,   55,   55,  588,
       55,  605,  592,  591,  597,  598,  601,  604,  595,  596,

      606,  594,   55,  602,   55,  608,   55,   55,  603,   55,
       55,  609,   55,  615,  610,  612,  607,  611,   55,  617,
       55,   55,   55,   55,   55,  616,   55,  614,   55,  613,
      620,   55,   55,  621,   55,  618,   55,   55,   55,   55,
       55,   55,   55,   55,  623,  622,  626,   55,   55,  627,
      624,  646,   55,   55,  633,  630,   55,   55,  625,   55,
       55,   55,   55,  629,  628,  632,  641,   55,   55,  631,
       55,  636,  648,   55,   55,  643,  638,  637,  639,  640,
      644,  642,  647,  653,  645,   55,  649,  652,   55,  658,
      650,  655,  656,  651,   55,  654,  659,  660,   55,   55,

      657,   55,  661,  662,  663,   55,   55,   55,  664,   55,
       55,   55,   55,   55,  670,   55,   55,   55,   55,   55,
       55,   55,   55,  666,  699,  673,  667,  665, 1158,   55,
      671,   55,   55,  672,   55,  679,   55,  674,  678,   55,
       55,   55,  682,  676,   55,  677,   55,  684,   55,   55,
      681,  700,  680,  686,  689,  683,   55,  696,  698,  692,
      690,  691,  693,  694,  702,  703,  704,  707,  705,  709,
      711,  710,  713,   55,  717,  714,   55,   55,   55,  712,
      716,  718,  715,  723,  719,   55,   55,   55,   55,  732,
      732,  732,  732,  732,  256,  706,  720,   55,   55,   55,

     1153,   55,   55, 1152,  724,   55, 1150,  722,   55,  728,
       55,   55,   55,   55,   55, 1149,  735, 1148,   55,  727,
      730,  725,  733,  733,  733,  733,  733,  496,  733,  733,
      733,  733,  733,  733,  739,  737,  744,  740,  741,  736,
      745,  746,  738,  747,   55,   55,  749,   55,  750,   55,
      733,  733,  733,  733,  733,  733,  734,  734,  734,  734,
      734,  498,  734,  734,  734,  734,  734,  734,  752,  748,
       55,   55,  754,   55,   55,   55,   55,   55,   55,   55,
       55,   55,   55,   55,  734,  734,  734,  734,  734,  734,
       55,  753,   55,   55,  758,   55,   55,   55,   55,  759,

      760,   55,  763,  765,  761,   55,  773,  768,   55,   55,
      770,   55,   55,   55,  755,  772,   55,   55,  762,  766,
      774,  776,  764,  767,   55,   55,   55,  771,   55,   55,
       55,   55,   55,   55,  784,  778,   55,  775,  785,  789,
       55,  786,  777,   55,   55,   55,   55,  780,   55,   55,
      783,   55,  792,  790,  796,   55,  810,  787,  788,   55,
      798,   55,   55,  791,  799,  794,   55,  806,   55,   55,
      808,  812,   55,  802,  814,  826,  805,  827,   55,   55,
       55,   55,   55,   55,   55,  811,   55,   55,  813,  819,
       55,  829,  815,   55,   55,  825,   55,   55,  816,   55,

      828,   55,   55,  820,  823,  835,   55,   55,   55,  833,
      838,  832,   55,  844,  834,  836,   55,   55,   55,  846,
      839,   55,   55,   55,  848,   55,  837,  841,  850,   55,
       55,   55,   55,  851,  852,   55,  857,   55,   55,  855,
      853,  861,   55,   55,  854,  858,  863,  866,  860,  859,
      868,   55,  869,  864,  872,   55,   55,  871,   55,   55,
       55,   55,   55,   55,  867,  879,   55,   55,  878,   55,
       55,   55,  873,  870,  883,   55,  874,   55,  877,   55,
       55,  886,   55,  887,  892,   55,  885,   55,   55,   55,
       55,   55,  906,   55,  896,  894,   55,   55,  897,  899,

      913,   55,  907,  901,  902,   55,  900,  903,  915,  914,
       55, 1146, 1145,   55,  918,  917,  920,   55,  916, 1144,
     1143,  919,  924,  926,   55,   55,   55,  927,  939, 1142,
      922,  929,  941,   55,  925,   55,  957,  944,  930,  935,
      935,  935,  935,  935,  256,  936,  936,  936,  936,  936,
      496,  936,  936,  936,  936,  936,  936,  946,  945,   55,
      948,  968,  950,  951,   55,   55,   55,   55,   55,   55,
       55,   55,   55,  936,  936,  936,  936,  936,  936,  937,
      937,  937,  937,  937,  498,  937,  937,  937,  937,  937,
      937,  953,  955,  958,  960,  962,  964,  966,  972,  965,

       55,   55,   55,   55,   55,   55,   55,  937,  937,  937,
      937,  937,  937,   55,   55,   55,   55,   55,   55,  982,
       55, 1006,   55, 1007,   55,   55,   55,  974,   55,  976,
      977,  981,  986,   55,   55,   55,   55,   55,  975,   55,
       55,   55,   55,  997,  998, 1000,  988,  989,   55,   55,
      993,   55,   55,   55,   55,  994, 1005, 1002, 1021,   55,
     1013, 1016,   55,   55, 1012,   55, 1011,   55, 1036, 1037,
     1019, 1061, 1066,   55,   55, 1040, 1025, 1027, 1046, 1026,
       55, 1031, 1045,   55,   55, 1141, 1043,   55, 1048,   55,
     1140, 1139, 1138, 1137, 1047, 1049, 1136, 1134,   55, 1062,

     1057, 1060, 1056,   55,   55, 1133,   55, 1073, 1063,   55,
     1075, 1068, 1078, 1067, 1079, 1081, 1081, 1081, 1081, 1081,
      256, 1077, 1082, 1082, 1082, 1082, 1082,  496, 1082, 1082,
     1082, 1082, 1082, 1082, 1091,   55, 1147,   55, 1132, 1098,
     1104, 1108, 1131, 1130, 1129, 1117,   55, 1128, 1127, 1126,
     1082, 1082, 1082, 1082, 1082, 1082, 1083, 1083, 1083, 1083,
     1083,  498, 1083, 1083, 1083, 1083, 1083, 1083, 1125, 1124,
     1123, 1135, 1122, 1151, 1155, 1155, 1155, 1155, 1155,  256,
     1121, 1164, 1120, 1119, 1083, 1083, 1083, 1083, 1083, 1083,
     1156, 1156, 1156, 1156, 1156,  496, 1156, 1156, 1156, 1156,

     1156, 1156, 1166, 1166, 1166, 1166, 1166,  256, 1166, 1166,
     1166, 1166, 1166, 1170, 1118, 1116, 1115, 1114, 1156, 1156,
     1156, 1156, 1156, 1156, 1157, 1157, 1157, 1157, 1157,  498,
     1157, 1157, 1157, 1157, 1157, 1157, 1113, 1112, 1111, 1110,
     1109, 1107, 1106, 1105, 1103, 1102, 1101, 1100, 1099, 1097,
     1096, 1095, 1157, 1157, 1157, 1157, 1157, 1157,    4,    4,
        4,    7, 1094,    7,   54,   54,   54,  254,  254,  254,
      493,  493,  493,  731,  731,  731,  934,  934,  934, 1080,
     1080, 1080, 1154, 1154, 1154, 1093, 1092, 1090, 1089, 1088,
     1087, 1086, 1085, 1084,   55, 1076, 1074, 1072, 1071, 1070,

     1069, 1064, 1059, 1058, 1055, 1054, 1053, 1052, 1051, 1050,
     1044, 1042, 1041, 1039, 1038, 1035, 1034, 1033, 1032, 1030,
     1029, 1028, 1024, 1023, 1022, 1020, 1018, 1017, 1015, 1014,
     1010, 1009, 1004, 1003, 1001,  999,  996,  995,  992,  991,
      990,  987,  985,  984,  983,  980,  979,  978,  973,  971,
      970,  969,  967,  963,  961,  959,  956,  954,  952,  949,
      947,  943,  942,  940,  938,   55,  933,  932,  931,  928,
      923,  921,  912,  911,  910,  909,  908,  905,  904,  898,
      895,  893,  891,  890,  889,  888,  884,  882,  881,  880,
      876,  875,  865,  862,  856,  849,  847,  845,  843,  842,

      840,  831,  830,  824,  822,  821,  818,  817,  809,  807,
      804,  803,  801,  800,  797,  795,  793,  782,  781,  779,
      769,  757,  756,  751,  743,  742,   55,  729,  726,  721,
      708,  701,  697,  695,  688,  687,  685,  675,  669,  668,
      635,  634,  619,  600,  599,  587,  582,  576,  572,  563,
      562,  561,  544,  540,  539,  537,  517,  512,  509,   55,
      486,  419,  415,  414,  410,  404,  397,  373,  372,  314,
      300,  289,  287,   55,   55, 1173,    3, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,

     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173
    } ;

static yyconst flex_int16_t yy_chk[2136] =
    {   0,
        0,    1,    2,    1,    2,    6,    6,    6,    6,    6,
        6,    6,    6,    6, 1184,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    9,    9,    9,    9,    9,    9,   11,
       12,   13, 1183,  105,   14, 1168,   19,   23,   15,   17,
       20,   16,   18,   45, 1167,   72,   39,  105,    9,  827,
      827,   35,   14,   72,   13,   12,   11,   14,   13,   14,

       12,   15,   17,   14,   16,   18,   16,   23,   24,   39,
       16,   22,   14,   25,    9,   10,   14,   14,   16,   19,
       10,   25,   20,   20,   16,   26,   45,   35,   35,   27,
       28,   35,   62,   24,   29,   50,   25,   59,   10,   24,
       10,   22,   22,   25,   10,   51,   61,   52,   26,   10,
       26,   22,   22,   28,   26,   10,   36,   10,   10,   21,
       27,   29,   50,   26,   21,   31,   33,   33,   26,   53,
       52,   59,   62,   28,   52, 1164,   51,   61, 1157,   36,
       64,   41,   21,   36,   21,   63,   37,   37,   21,   33,
       52,   31,   31,   33,   21,   71,   53,   33,   36,   66,

       21,   21,   21,   30,   41,   31,   60,   41,   31,   37,
       48,   64,   41,   37,   53,   56,   56,   56,   56,   56,
       56,   65,   67,   63,   41,   69,   30,   68,   30,   71,
       30,   60,   30,   48,   66,   73,   70,   30,   30,   30,
       48,   48,   74,   30,   30,   30,   30,   32,   75,   82,
       48,   80,   65,   76,   68,   85,   69,   49,   49,   83,
       73,   78,   77,   79,   67,   70,   81,   84,   86,   93,
       32,   90,   32,   74,   32,   88,   80,   32,   32,   91,
       49,   32,   49,   95,   32,   77,   49,   32,   75,   82,
       32,   34,   49,   85,   76,   49,   78,   81,   79,  102,

       49,   83,   84,   86,   91,   90,   88,   97,   92,   93,
       96,  106,   98,   94,   34,  100,   34,   95,  101,  104,
       34,  109,  103,  107,  110,  111,   34,   34,  108,   34,
       34,  114,  117,   34,   34,  112,  102,   34,   38,   92,
       94,   96,   97,   98,   94,  103,  100,  116,  104,  101,
      107,  115,  109,  108,  106,  120,  114,  117,  119,  118,
      121,   38,  122,   38,  110,   38,  111,   38,  123,  125,
      112,  127,  124,   38,   38,   38,  128,   38,  129,   38,
      126,   38,   40,   40,  130,  133,  115,  121,  132,  116,
      118,  136,  119,  131,  123,  120,  137,  123,  121,  138,

      122,  135,  118,  124,  134,   40,  127,   40,   40,   40,
       40,  126,  133,  139,  141,  128,  125,  140,  142,   40,
      129,  144,   40,   40,   40,   42,  132,  131,  130,  146,
      134,  136,  135,  147,  145,  138,  139,  138,  148,  137,
      134,  143,  149,  150,  144,  151,  154,  142,   42,   42,
      153,   42,   42, 1156,  141,  140,   42,  140,  142,  145,
      146, 1154,   42,  152,  155,  144,   42,   42,   42,   43,
      143,  158,  157,  147,  156,  143,  148,  154,  161,  148,
      162,  166,  163,  149,  150,  153,  152,  174,  151,  167,
      153,  169,   43,  152,   43,  157,   43,  164,   43,  165,

      168,  155,  171,   43,   43,  163,  158,   43,  172,   43,
       43,   43,   43,   44,  156,  170,  163,  173,  161,  169,
      162,  175,  164,  168,  176,  174,  178,  166,  180,  167,
      165,  177,  182,  169,  195,  190,   44,  194, 1151,  172,
       44,  185,  181,   44,   44,  171,  186,   44,  187,  183,
       44,  189,  173,   44,   44,   46,   46,  170,  177,  176,
      176,  175,  180,  176,  176,  178,  185,  182,  191,  186,
      196,  199,  183,  187,  187,  189,  190,  195,   46,  194,
       46,   46,   46,   46,  187,   46,  198,  181,  183,   46,
      181,  191,  200,  201,  202,  204,   46,   47,  206,  212,

      306,  196,  199,  203,  208,  205,  207,  211, 1135,  225,
      216,  198,  914,  914, 1117,  220,  306,  213,  209,  210,
      214,   47,   47,   47,   47,  202,  200,   47,   47,  204,
      203,  205,  206,  201,  203,   47,  215,  207,  211,  208,
       47,  216,  220,  212,  225,   47,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   57,   57,   57,  209,  210,
      213,  217,  218,  214,  221,  227,  223,  215,  224,  229,
      222,  230,  228,  215,   57,   57,   57,   57,   57,   57,
       58,   58,   58,   58,   58,  232,   58,   58,   58,   58,
       58,   58,  219,  222,  226,  228,  230,  231,  217,  222,

      223,  233,  218,  221,  227,  224,  229,  235,   58,   58,
       58,   58,   58,   58,  232,  234,  236,  226,  219,  239,
      232,  237,  238,  240,  233,  243,  241,  244,  219,  242,
      245,  219,  219,  226,  246,  251,  247,  249,  250,  234,
      252,  235,  239,  253,  231,  259,  265,  263,  237,  262,
      234,  241,  237,  234, 1108, 1104,  238,  238,  237,  236,
      242,  244,  249,  240,  260,  243,  241,  247,  261,  246,
      251,  245,  262,  264,  250,  253,  259,  263,  266,  253,
      265,  267,  252,  255,  255,  255,  255,  255,  255,  257,
      257,  257,  257,  257,  257,  257,  257,  257,  257,  257,

      257,  271,  273,  280,  267,  278,  270,  260,  261,  264,
      268,  276,  266,  279, 1098,  275,  284,  257,  257,  257,
      257,  257,  257,  258,  258,  258,  258,  258,  258,  258,
      258,  258,  258,  258,  258,  270,  268,  274,  275,  278,
      281,  282,  276,  271,  283,  273,  280,  285,  279,  286,
      284,  258,  258,  258,  258,  258,  258,  288,  290,  291,
      292,  293,  295,  294,  282,  296,  301,  283,  304,  297,
      298,  305,  308,  286,  309,  310,  311,  274,  312,  313,
      281,  315,  316,  318,  293,  285,  320,  295,  296,  290,
      319,  288,  294,  323,  321,  317,  322,  324,  328,  311,

      292,  301,  291,  297,  298,  329,  305,  330,  304,  312,
      331,  332,  333,  313,  308,  310,  316,  309,  317,  322,
      338,  323,  334,  335,  315,  321,  318,  324,  320,  337,
      319,  339,  342,  341,  328,  333,  343,  344,  345,  347,
      329,  330,  348,  349,  331,  350,  334,  352,  353,  354,
      355,  338,  356,  357,  332,  337,  342,  335,  341,  358,
      359,  360,  365,  361,  362,  343,  366,  367,  369,  368,
      371,  374,  349,  339,  375,  370,  357,  376,  345,  347,
      354,  377,  348,  353,  344,  350,  378,  379,  380,  352,
      382,  369,  356,  355,  361,  362,  365,  368,  359,  360,

      370,  358,  381,  366,  383,  371,  386,  385,  367,  387,
      388,  374,  389,  380,  375,  377,  370,  376,  390,  382,
      392,  393,  391,  394,  395,  381,  396,  379,  398,  378,
      385,  399,  402,  386,  403,  383,  405,  406,  409,  407,
      408,  411,  412,  413,  388,  387,  391,  420,  417,  392,
      389,  416,  418,  421,  399,  395,  422,  427,  390,  424,
      423,  429,  425,  394,  393,  398,  408,  426,  431,  396,
      432,  402,  417,  438,  430,  411,  405,  403,  406,  407,
      412,  409,  416,  423,  413,  433,  418,  422,  434,  429,
      420,  425,  426,  421,  439,  424,  429,  430,  440,  441,

      427,  443,  431,  431,  432,  444,  446,  445,  433,  447,
      448,  449,  450,  451,  438,  456,  453,  457,  458,  459,
      460,  461,  463,  434,  466,  441,  434,  433, 1091,  471,
      439,  478,  465,  440,  472,  446,  469,  441,  445,  473,
      477,  479,  449,  443,  480,  444,  474,  451,  475,  484,
      448,  466,  447,  453,  456,  450,  476,  463,  465,  459,
      457,  458,  460,  461,  468,  468,  468,  469,  468,  471,
      472,  471,  474,  481,  478,  475,  483,  485,  487,  473,
      477,  479,  476,  484,  480,  489,  490,  499,  492,  494,
      494,  494,  494,  494,  494,  468,  481,  500,  502, 1080,

     1079,  513,  515, 1078,  485,  508, 1075,  483,  504,  490,
      501,  503,  505,  510,  516, 1073,  499, 1068,  511,  489,
      492,  487,  495,  495,  495,  495,  495,  495,  495,  495,
      495,  495,  495,  495,  503,  501,  508,  504,  505,  500,
      510,  511,  502,  513,  514,  519,  515,  521,  516,  520,
      495,  495,  495,  495,  495,  495,  497,  497,  497,  497,
      497,  497,  497,  497,  497,  497,  497,  497,  519,  514,
      522,  525,  521,  526,  527,  528,  529,  530,  531,  533,
      532,  535,  534,  538,  497,  497,  497,  497,  497,  497,
      541,  520,  542,  543,  525,  546,  547,  545,  548,  526,

      527,  549,  530,  532,  528,  551,  543,  535,  554,  555,
      538,  556,  557,  558,  522,  542,  560,  559,  529,  533,
      545,  547,  531,  534,  564,  565,  566,  541,  568,  573,
      574,  570,  578,  588,  555,  549,  581,  546,  556,  560,
      583,  557,  548,  585,  589,  590,  591,  551,  593,  592,
      554,  594,  566,  564,  570,  597,  588,  558,  559,  598,
      573,  605,  603,  565,  574,  568,  607,  583,  608,  611,
      585,  590,  613,  578,  592,  606,  581,  606,  612,  606,
      614,  615,  616,  617,  618,  589,  621,  628,  591,  597,
      624,  608,  593,  626,  630,  605,  631,  632,  594,  633,

      607,  636,  637,  598,  603,  614,  639,  642,  640,  612,
      617,  611,  641,  624,  613,  615,  645,  647,  643,  626,
      618,  649,  650,  652,  628,  651,  616,  621,  630,  653,
      654,  655,  656,  631,  632,  657,  639,  660,  662,  637,
      633,  643,  661,  666,  636,  640,  645,  649,  642,  641,
      651,  670,  652,  647,  655,  671,  672,  654,  680,  678,
      682,  683,  686,  689,  650,  662,  690,  691,  661,  696,
      692,  707,  656,  653,  666,  698,  657,  711,  660,  712,
      714,  671,  709,  672,  678,  710,  670,  713,  717,  715,
      720,  724,  696,  722,  682,  680,  725,  719,  683,  686,

      707,  736,  698,  690,  691,  738,  689,  692,  710,  709,
      741, 1065, 1063,  759,  713,  712,  715,  745,  711, 1062,
     1060,  714,  719,  722,  744,  771,  750,  722,  736, 1057,
      717,  724,  738,  747,  720,  749,  759,  741,  725,  732,
      732,  732,  732,  732,  732,  733,  733,  733,  733,  733,
      733,  733,  733,  733,  733,  733,  733,  745,  744,  766,
      747,  771,  749,  750,  753,  755,  760,  762,  764,  767,
      768,  775,  788,  733,  733,  733,  733,  733,  733,  734,
      734,  734,  734,  734,  734,  734,  734,  734,  734,  734,
      734,  753,  755,  760,  762,  764,  766,  768,  775,  767,

      777,  778,  780,  783,  787,  792,  796,  734,  734,  734,
      734,  734,  734,  798,  806,  808,  812,  813,  815,  788,
      819,  826,  825,  826,  826,  832,  833,  777,  841,  780,
      783,  787,  792,  834,  837,  846,  852,  853,  778,  859,
      854,  866,  867,  812,  813,  815,  796,  798,  870,  873,
      806,  878,  877,  879,  883,  808,  825,  819,  846,  885,
      834,  837,  899,  900,  833,  903,  832,  907,  866,  867,
      841,  906,  915,  916,  929,  870,  852,  854,  878,  853,
      922,  859,  877,  925,  927, 1056,  873,  930,  883, 1067,
     1049, 1048, 1047, 1046,  879,  885, 1045, 1040,  951,  906,

      900,  903,  899,  964,  975, 1037,  982,  922,  907, 1002,
      925,  916,  929,  915,  930,  935,  935,  935,  935,  935,
      935,  927,  936,  936,  936,  936,  936,  936,  936,  936,
      936,  936,  936,  936,  951, 1043, 1067, 1077, 1036,  964,
      975,  982, 1031, 1027, 1026, 1002, 1147, 1025, 1021, 1019,
      936,  936,  936,  936,  936,  936,  937,  937,  937,  937,
      937,  937,  937,  937,  937,  937,  937,  937, 1016, 1013,
     1012, 1043, 1011, 1077, 1081, 1081, 1081, 1081, 1081, 1081,
     1008, 1147, 1007, 1006,  937,  937,  937,  937,  937,  937,
     1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082, 1082,

     1082, 1082, 1155, 1155, 1155, 1155, 1155, 1155, 1166, 1166,
     1166, 1166, 1166, 1166, 1005, 1000,  998,  997, 1082, 1082,
     1082, 1082, 1082, 1082, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1083, 1083, 1083, 1083, 1083,  994,  993,  989,  988,
      986,  981,  977,  976,  974,  972,  968,  966,  965,  962,
      960,  958, 1083, 1083, 1083, 1083, 1083, 1083, 1174, 1174,
     1174, 1175,  957, 1175, 1176, 1176, 1176, 1177, 1177, 1177,
     1178, 1178, 1178, 1179, 1179, 1179, 1180, 1180, 1180, 1181,
     1181, 1181, 1182, 1182, 1182,  955,  953,  950,  948,  946,
      945,  944,  941,  939,  934,  926,  924,  920,  919,  918,

      917,  913,  902,  901,  897,  896,  894,  892,  887,  886,
      874,  872,  871,  869,  868,  864,  863,  861,  860,  858,
      857,  855,  851,  850,  848,  844,  839,  838,  836,  835,
      829,  828,  823,  820,  816,  814,  811,  810,  805,  802,
      799,  794,  791,  790,  789,  786,  785,  784,  776,  774,
      773,  772,  770,  765,  763,  761,  758,  754,  752,  748,
      746,  740,  739,  737,  735,  731,  730,  728,  727,  723,
      718,  716,  706,  704,  703,  702,  700,  694,  693,  684,
      681,  679,  677,  676,  674,  673,  667,  665,  664,  663,
      659,  658,  648,  644,  638,  629,  627,  625,  623,  622,

      620,  610,  609,  604,  602,  601,  596,  595,  586,  584,
      580,  579,  577,  575,  571,  569,  567,  553,  552,  550,
      536,  524,  523,  518,  507,  506,  493,  491,  488,  482,
      470,  467,  464,  462,  455,  454,  452,  442,  437,  435,
      401,  400,  384,  364,  363,  351,  346,  340,  336,  327,
      326,  325,  307,  303,  302,  299,  277,  272,  269,  254,
      248,  197,  193,  192,  188,  184,  179,  160,  159,  113,
       99,   89,   87,   54,    8,    3, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,

     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173,
     1173, 1173, 1173, 1173, 1173
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "htmlEnt2Char.l"
/* 
converter for HTML-entities 
HTML-entities from the input stream are converted
to characters in UTF-8 or ISO-8859-1 (see options)
This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston, MA
02110-1301, USA.
Written 2004
by Sebastian Nagel, CIS Uni München */
#line 28 "htmlEnt2Char.l"

#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <unistd.h>

typedef unsigned int BOOL;
enum { FALSE = 0, TRUE = 1 };

enum { ISO_LATIN_1 = 1, UTF8 };

struct option {
  BOOL QUIET;
  unsigned char ENCODING;
  BOOL FORCE;
  BOOL Replace;
  unsigned int rChar;
  BOOL replace;
  char* rString;
} option
    = { FALSE, /* (QUIET) default: report errors */
	UTF8,  /* default encoding */
	FALSE, /* don't skip unrecognized/unprintable characters */
	FALSE, /* don't replace unrecognized/unprintable characters */
	0x3f,  /* question mark */
	FALSE, /* don't replace unrecognized/unprintable characters */
	"???"
    };	

unsigned int num; /* buffer for value of numerical entities */

inline static char*
num_to_utf8 (int num, char* out)
{
  int i = 0;
  if (num <= 0x7f) {
    out[i++] = (unsigned char)(num);
  } else if (num <= 0x7ff) {
    /* 00000000 00000000 00000bbb bbaaaaaa  ==>   110bbbbb 10aaaaaa */
    out[i++] = (unsigned char)(0xc0 | (num >> 6));
    out[i++] = (unsigned char)(0x80 | (num & 0x3f));
  } else if (num <= 0xffff) {
    /* 00000000 00000000 ccccbbbb bbaaaaaa  ==>   1110cccc 10bbbbbb 10aaaaaa */
    out[i++] = (unsigned char)(0xe0 | (num >> 12));
    out[i++] = (unsigned char)(0x80 | ((num >> 6) & 0x3f));
    out[i++] = (unsigned char)(0x80 | (num & 0x3f));
  } else if (num <= 0x10ffff) {
    /* 00000000 000dddcc ccccbbbb bbaaaaaa  ==>   11110ddd 10cccccc 10bbbbbb 10aaaaaa */
    out[i++] = (unsigned char)(0xf0 | (num >> 18));
    out[i++] = (unsigned char)(0x80 | ((num >> 12) & 0x3f));
    out[i++] = (unsigned char)(0x80 | ((num >> 6) & 0x3f));
    out[i++] = (unsigned char)(0x80 | (num & 0x3f));
  } else {
    /* characters > 0x10ffff are illegal in Unicode 4.0 */
    if (option.QUIET != TRUE)
      fprintf(stderr, "Char 0x%x (\"%s\") not defined in unicode!\n", num, yytext);
  }
  out[i] = '\0';
  return out;
}

inline static char* 
num_to_iso_latin_1 (int num, char* out)
{
  int i = 0;
  if (num <= 0xff)
    out[i++] = (unsigned char)(num);
  else
    if (option.QUIET != TRUE)
      fprintf(stderr, "Char 0x%x (\"%s\") doesn't exist in ISO-8859-1: use UTF-8!\n", num, yytext);
  out[i] = '\0';
  return out;
}

inline static void
out (unsigned int num)
{
  char out[8];
  if ( option.ENCODING == UTF8 )
    num_to_utf8(num, out);
  else if ( option.ENCODING == ISO_LATIN_1 )
    num_to_iso_latin_1(num, out);
  fputs(out, yyout);
}

#line 1416 "<stdout>"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 115 "htmlEnt2Char.l"


#line 1572 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1174 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1173 );
		yy_cp = (yy_last_accepting_cpos);
		yy_current_state = (yy_last_accepting_state);

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 117 "htmlEnt2Char.l"
out(0x22); /* quotation mark = APL quote */
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 118 "htmlEnt2Char.l"
out(0x26); /* ampersand */
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 119 "htmlEnt2Char.l"
out(0x3c); /* less-than sign */
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 120 "htmlEnt2Char.l"
out(0x3e); /* greater-than sign */
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 121 "htmlEnt2Char.l"
out(0xa0); /* no-break space = non-breaking space */
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 122 "htmlEnt2Char.l"
out(0xa1); /* inverted exclamation mark */
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 123 "htmlEnt2Char.l"
out(0xa2); /* cent sign */
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 124 "htmlEnt2Char.l"
out(0xa3); /* pound sign */
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 125 "htmlEnt2Char.l"
out(0xa4); /* currency sign */
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 126 "htmlEnt2Char.l"
out(0xa5); /* yen sign = yuan sign */
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 127 "htmlEnt2Char.l"
out(0xa6); /* broken bar = broken vertical bar */
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 128 "htmlEnt2Char.l"
out(0xa7); /* section sign */
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 129 "htmlEnt2Char.l"
out(0xa8); /* diaeresis = spacing diaeresis */
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 130 "htmlEnt2Char.l"
out(0xa9); /* copyright sign */
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 131 "htmlEnt2Char.l"
out(0xaa); /* feminine ordinal indicator */
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 132 "htmlEnt2Char.l"
out(0xab); /* left-pointing double angle quotation mark */
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 133 "htmlEnt2Char.l"
out(0xac); /* not sign */
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 134 "htmlEnt2Char.l"
out(0xad); /* soft hyphen = discretionary hyphen */
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 135 "htmlEnt2Char.l"
out(0xae); /* registered sign = registered trade mark sign */
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 136 "htmlEnt2Char.l"
out(0xaf); /* macron = spacing macron = overline */
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 137 "htmlEnt2Char.l"
out(0xb0); /* degree sign */
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 138 "htmlEnt2Char.l"
out(0xb1); /* plus-minus sign = plus-or-minus sign */
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 139 "htmlEnt2Char.l"
out(0xb2); /* superscript two = superscript digit two */
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 140 "htmlEnt2Char.l"
out(0xb3); /* superscript three = superscript digit three */
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 141 "htmlEnt2Char.l"
out(0xb4); /* acute accent = spacing acute */
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 142 "htmlEnt2Char.l"
out(0xb5); /* micro sign */
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 143 "htmlEnt2Char.l"
out(0xb6); /* pilcrow sign = paragraph sign */
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 144 "htmlEnt2Char.l"
out(0xb7); /* middle dot = Georgian comma */
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 145 "htmlEnt2Char.l"
out(0xb8); /* cedilla = spacing cedilla */
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 146 "htmlEnt2Char.l"
out(0xb9); /* superscript one = superscript digit one */
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 147 "htmlEnt2Char.l"
out(0xba); /* masculine ordinal indicator */
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 148 "htmlEnt2Char.l"
out(0xbb); /* right-pointing double angle quotation mark */
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 149 "htmlEnt2Char.l"
out(0xbc); /* vulgar fraction one quarter */
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 150 "htmlEnt2Char.l"
out(0xbd); /* vulgar fraction one half */
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 151 "htmlEnt2Char.l"
out(0xbe); /* vulgar fraction three quarters */
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 152 "htmlEnt2Char.l"
out(0xbf); /* inverted question mark */
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 153 "htmlEnt2Char.l"
out(0xc0); /* latin capital letter A with grave */
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 154 "htmlEnt2Char.l"
out(0xc1); /* latin capital letter A with acute */
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 155 "htmlEnt2Char.l"
out(0xc2); /* latin capital letter A with circumflex */
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 156 "htmlEnt2Char.l"
out(0xc3); /* latin capital letter A with tilde */
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 157 "htmlEnt2Char.l"
out(0xc4); /* latin capital letter A with diaeresis */
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 158 "htmlEnt2Char.l"
out(0xc5); /* latin capital letter A with ring above */
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 159 "htmlEnt2Char.l"
out(0xc6); /* latin capital letter AE */
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 160 "htmlEnt2Char.l"
out(0xc7); /* latin capital letter C with cedilla */
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 161 "htmlEnt2Char.l"
out(0xc8); /* latin capital letter E with grave */
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 162 "htmlEnt2Char.l"
out(0xc9); /* latin capital letter E with acute */
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 163 "htmlEnt2Char.l"
out(0xca); /* latin capital letter E with circumflex */
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 164 "htmlEnt2Char.l"
out(0xcb); /* latin capital letter E with diaeresis */
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 165 "htmlEnt2Char.l"
out(0xcc); /* latin capital letter I with grave */
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 166 "htmlEnt2Char.l"
out(0xcd); /* latin capital letter I with acute */
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 167 "htmlEnt2Char.l"
out(0xce); /* latin capital letter I with circumflex */
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 168 "htmlEnt2Char.l"
out(0xcf); /* latin capital letter I with diaeresis */
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 169 "htmlEnt2Char.l"
out(0xd0); /* latin capital letter ETH */
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 170 "htmlEnt2Char.l"
out(0xd1); /* latin capital letter N with tilde */
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 171 "htmlEnt2Char.l"
out(0xd2); /* latin capital letter O with grave */
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 172 "htmlEnt2Char.l"
out(0xd3); /* latin capital letter O with acute */
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 173 "htmlEnt2Char.l"
out(0xd4); /* latin capital letter O with circumflex */
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 174 "htmlEnt2Char.l"
out(0xd5); /* latin capital letter O with tilde */
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 175 "htmlEnt2Char.l"
out(0xd6); /* latin capital letter O with diaeresis */
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 176 "htmlEnt2Char.l"
out(0xd7); /* multiplication sign */
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 177 "htmlEnt2Char.l"
out(0xd8); /* latin capital letter O with stroke */
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 178 "htmlEnt2Char.l"
out(0xd9); /* latin capital letter U with grave */
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 179 "htmlEnt2Char.l"
out(0xda); /* latin capital letter U with acute */
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 180 "htmlEnt2Char.l"
out(0xdb); /* latin capital letter U with circumflex */
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 181 "htmlEnt2Char.l"
out(0xdc); /* latin capital letter U with diaeresis */
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 182 "htmlEnt2Char.l"
out(0xdd); /* latin capital letter Y with acute */
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 183 "htmlEnt2Char.l"
out(0xde); /* latin capital letter THORN */
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 184 "htmlEnt2Char.l"
out(0xdf); /* latin small letter sharp s = ess-zed */
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 185 "htmlEnt2Char.l"
out(0xe0); /* latin small letter a with grave */
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 186 "htmlEnt2Char.l"
out(0xe1); /* latin small letter a with acute */
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 187 "htmlEnt2Char.l"
out(0xe2); /* latin small letter a with circumflex */
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 188 "htmlEnt2Char.l"
out(0xe3); /* latin small letter a with tilde */
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 189 "htmlEnt2Char.l"
out(0xe4); /* latin small letter a with diaeresis */
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 190 "htmlEnt2Char.l"
out(0xe5); /* latin small letter a with ring above */
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 191 "htmlEnt2Char.l"
out(0xe6); /* latin small letter ae */
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 192 "htmlEnt2Char.l"
out(0xe7); /* latin small letter c with cedilla */
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 193 "htmlEnt2Char.l"
out(0xe8); /* latin small letter e with grave */
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 194 "htmlEnt2Char.l"
out(0xe9); /* latin small letter e with acute */
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 195 "htmlEnt2Char.l"
out(0xea); /* latin small letter e with circumflex */
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 196 "htmlEnt2Char.l"
out(0xeb); /* latin small letter e with diaeresis */
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 197 "htmlEnt2Char.l"
out(0xec); /* latin small letter i with grave */
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 198 "htmlEnt2Char.l"
out(0xed); /* latin small letter i with acute */
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 199 "htmlEnt2Char.l"
out(0xee); /* latin small letter i with circumflex */
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 200 "htmlEnt2Char.l"
out(0xef); /* latin small letter i with diaeresis */
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 201 "htmlEnt2Char.l"
out(0xf0); /* latin small letter eth */
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 202 "htmlEnt2Char.l"
out(0xf1); /* latin small letter n with tilde */
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 203 "htmlEnt2Char.l"
out(0xf2); /* latin small letter o with grave */
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 204 "htmlEnt2Char.l"
out(0xf3); /* latin small letter o with acute */
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 205 "htmlEnt2Char.l"
out(0xf4); /* latin small letter o with circumflex */
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 206 "htmlEnt2Char.l"
out(0xf5); /* latin small letter o with tilde */
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 207 "htmlEnt2Char.l"
out(0xf6); /* latin small letter o with diaeresis */
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 208 "htmlEnt2Char.l"
out(0xf7); /* division sign */
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 209 "htmlEnt2Char.l"
out(0xf8); /* latin small letter o with stroke */
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 210 "htmlEnt2Char.l"
out(0xf9); /* latin small letter u with grave */
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 211 "htmlEnt2Char.l"
out(0xfa); /* latin small letter u with acute */
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 212 "htmlEnt2Char.l"
out(0xfb); /* latin small letter u with circumflex */
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 213 "htmlEnt2Char.l"
out(0xfc); /* latin small letter u with diaeresis */
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 214 "htmlEnt2Char.l"
out(0xfd); /* latin small letter y with acute */
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 215 "htmlEnt2Char.l"
out(0xfe); /* latin small letter thorn */
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 216 "htmlEnt2Char.l"
out(0xff); /* latin small letter y with diaeresis */
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 217 "htmlEnt2Char.l"
out(0x192); /* latin small f with hook = function */
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 218 "htmlEnt2Char.l"
out(0x391); /* greek capital letter alpha */
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 219 "htmlEnt2Char.l"
out(0x392); /* greek capital letter beta */
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 220 "htmlEnt2Char.l"
out(0x393); /* greek capital letter gamma */
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 221 "htmlEnt2Char.l"
out(0x394); /* greek capital letter delta */
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 222 "htmlEnt2Char.l"
out(0x395); /* greek capital letter epsilon */
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 223 "htmlEnt2Char.l"
out(0x396); /* greek capital letter zeta */
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 224 "htmlEnt2Char.l"
out(0x397); /* greek capital letter eta */
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 225 "htmlEnt2Char.l"
out(0x398); /* greek capital letter theta */
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 226 "htmlEnt2Char.l"
out(0x399); /* greek capital letter iota */
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 227 "htmlEnt2Char.l"
out(0x39a); /* greek capital letter kappa */
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 228 "htmlEnt2Char.l"
out(0x39b); /* greek capital letter lambda */
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 229 "htmlEnt2Char.l"
out(0x39c); /* greek capital letter mu */
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 230 "htmlEnt2Char.l"
out(0x39d); /* greek capital letter nu */
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 231 "htmlEnt2Char.l"
out(0x39e); /* greek capital letter xi */
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 232 "htmlEnt2Char.l"
out(0x39f); /* greek capital letter omicron */
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 233 "htmlEnt2Char.l"
out(0x3a0); /* greek capital letter pi */
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 234 "htmlEnt2Char.l"
out(0x3a1); /* greek capital letter rho */
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 235 "htmlEnt2Char.l"
out(0x3a3); /* greek capital letter sigma */
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 236 "htmlEnt2Char.l"
out(0x3a4); /* greek capital letter tau */
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 237 "htmlEnt2Char.l"
out(0x3a5); /* greek capital letter upsilon */
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 238 "htmlEnt2Char.l"
out(0x3a6); /* greek capital letter phi */
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 239 "htmlEnt2Char.l"
out(0x3a7); /* greek capital letter chi */
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 240 "htmlEnt2Char.l"
out(0x3a8); /* greek capital letter psi */
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 241 "htmlEnt2Char.l"
out(0x3a9); /* greek capital letter omega */
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 242 "htmlEnt2Char.l"
out(0x3b1); /* greek small letter alpha */
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 243 "htmlEnt2Char.l"
out(0x3b2); /* greek small letter beta */
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 244 "htmlEnt2Char.l"
out(0x3b3); /* greek small letter gamma */
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 245 "htmlEnt2Char.l"
out(0x3b4); /* greek small letter delta */
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 246 "htmlEnt2Char.l"
out(0x3b5); /* greek small letter epsilon */
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 247 "htmlEnt2Char.l"
out(0x3b6); /* greek small letter zeta */
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 248 "htmlEnt2Char.l"
out(0x3b7); /* greek small letter eta */
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 249 "htmlEnt2Char.l"
out(0x3b8); /* greek small letter theta */
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 250 "htmlEnt2Char.l"
out(0x3b9); /* greek small letter iota */
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 251 "htmlEnt2Char.l"
out(0x3ba); /* greek small letter kappa */
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 252 "htmlEnt2Char.l"
out(0x3bb); /* greek small letter lambda */
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 253 "htmlEnt2Char.l"
out(0x3bc); /* greek small letter mu */
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 254 "htmlEnt2Char.l"
out(0x3bd); /* greek small letter nu */
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 255 "htmlEnt2Char.l"
out(0x3be); /* greek small letter xi */
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 256 "htmlEnt2Char.l"
out(0x3bf); /* greek small letter omicron */
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 257 "htmlEnt2Char.l"
out(0x3c0); /* greek small letter pi */
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 258 "htmlEnt2Char.l"
out(0x3c1); /* greek small letter rho */
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 259 "htmlEnt2Char.l"
out(0x3c2); /* greek small letter final sigma */
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 260 "htmlEnt2Char.l"
out(0x3c3); /* greek small letter sigma */
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 261 "htmlEnt2Char.l"
out(0x3c4); /* greek small letter tau */
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 262 "htmlEnt2Char.l"
out(0x3c5); /* greek small letter upsilon */
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 263 "htmlEnt2Char.l"
out(0x3c6); /* greek small letter phi */
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 264 "htmlEnt2Char.l"
out(0x3c7); /* greek small letter chi */
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 265 "htmlEnt2Char.l"
out(0x3c8); /* greek small letter psi */
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 266 "htmlEnt2Char.l"
out(0x3c9); /* greek small letter omega */
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 267 "htmlEnt2Char.l"
out(0x3d1); /* greek small letter theta symbol */
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 268 "htmlEnt2Char.l"
out(0x3d2); /* greek upsilon with hook symbol */
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 269 "htmlEnt2Char.l"
out(0x3d6); /* greek pi symbol */
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 270 "htmlEnt2Char.l"
out(0x2022); /* bullet = black small circle */
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 271 "htmlEnt2Char.l"
out(0x2026); /* horizontal ellipsis = three dot leader */
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 272 "htmlEnt2Char.l"
out(0x2032); /* prime = minutes = feet */
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 273 "htmlEnt2Char.l"
out(0x2033); /* double prime = seconds = inches */
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 274 "htmlEnt2Char.l"
out(0x203e); /* overline = spacing overscore */
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 275 "htmlEnt2Char.l"
out(0x2044); /* fraction slash */
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 276 "htmlEnt2Char.l"
out(0x2118); /* script capital P = power set */
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 277 "htmlEnt2Char.l"
out(0x2111); /* blackletter capital I = imaginary part */
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 278 "htmlEnt2Char.l"
out(0x211c); /* blackletter capital R = real part symbol */
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 279 "htmlEnt2Char.l"
out(0x2122); /* trade mark sign */
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 280 "htmlEnt2Char.l"
out(0x2135); /* alef symbol = first transfinite cardinal */
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 281 "htmlEnt2Char.l"
out(0x2190); /* leftwards arrow */
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 282 "htmlEnt2Char.l"
out(0x2191); /* upwards arrow */
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 283 "htmlEnt2Char.l"
out(0x2192); /* rightwards arrow */
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 284 "htmlEnt2Char.l"
out(0x2193); /* downwards arrow */
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 285 "htmlEnt2Char.l"
out(0x2194); /* left right arrow */
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 286 "htmlEnt2Char.l"
out(0x21b5); /* downwards arrow with corner leftwards */
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 287 "htmlEnt2Char.l"
out(0x21d0); /* leftwards double arrow */
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 288 "htmlEnt2Char.l"
out(0x21d1); /* upwards double arrow */
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 289 "htmlEnt2Char.l"
out(0x21d2); /* rightwards double arrow */
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 290 "htmlEnt2Char.l"
out(0x21d3); /* downwards double arrow */
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 291 "htmlEnt2Char.l"
out(0x21d4); /* left right double arrow */
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 292 "htmlEnt2Char.l"
out(0x2200); /* for all */
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 293 "htmlEnt2Char.l"
out(0x2202); /* partial differential */
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 294 "htmlEnt2Char.l"
out(0x2203); /* there exists */
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 295 "htmlEnt2Char.l"
out(0x2205); /* empty set = null set = diameter */
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 296 "htmlEnt2Char.l"
out(0x2207); /* nabla = backward difference */
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 297 "htmlEnt2Char.l"
out(0x2208); /* element of */
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 298 "htmlEnt2Char.l"
out(0x2209); /* not an element of */
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 299 "htmlEnt2Char.l"
out(0x220b); /* contains as member */
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 300 "htmlEnt2Char.l"
out(0x220f); /* n-ary product = product sign */
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 301 "htmlEnt2Char.l"
out(0x2211); /* n-ary sumation */
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 302 "htmlEnt2Char.l"
out(0x2212); /* minus sign */
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 303 "htmlEnt2Char.l"
out(0x2217); /* asterisk operator */
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 304 "htmlEnt2Char.l"
out(0x221a); /* square root = radical sign */
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 305 "htmlEnt2Char.l"
out(0x221d); /* proportional to */
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 306 "htmlEnt2Char.l"
out(0x221e); /* infinity */
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 307 "htmlEnt2Char.l"
out(0x2220); /* angle */
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 308 "htmlEnt2Char.l"
out(0x2227); /* logical and = wedge */
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 309 "htmlEnt2Char.l"
out(0x2228); /* logical or = vee */
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 310 "htmlEnt2Char.l"
out(0x2229); /* intersection = cap */
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 311 "htmlEnt2Char.l"
out(0x222a); /* union = cup */
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 312 "htmlEnt2Char.l"
out(0x222b); /* integral */
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 313 "htmlEnt2Char.l"
out(0x2234); /* therefore */
	YY_BREAK
case 198:
YY_RULE_SETUP
#line 314 "htmlEnt2Char.l"
out(0x223c); /* tilde operator = varies with = similar to */
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 315 "htmlEnt2Char.l"
out(0x2245); /* approximately equal to */
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 316 "htmlEnt2Char.l"
out(0x2248); /* almost equal to = asymptotic to */
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 317 "htmlEnt2Char.l"
out(0x2260); /* not equal to */
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 318 "htmlEnt2Char.l"
out(0x2261); /* identical to */
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 319 "htmlEnt2Char.l"
out(0x2264); /* less-than or equal to */
	YY_BREAK
case 204:
YY_RULE_SETUP
#line 320 "htmlEnt2Char.l"
out(0x2265); /* greater-than or equal to */
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 321 "htmlEnt2Char.l"
out(0x2282); /* subset of */
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 322 "htmlEnt2Char.l"
out(0x2283); /* superset of */
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 323 "htmlEnt2Char.l"
out(0x2284); /* not a subset of */
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 324 "htmlEnt2Char.l"
out(0x2286); /* subset of or equal to */
	YY_BREAK
case 209:
YY_RULE_SETUP
#line 325 "htmlEnt2Char.l"
out(0x2287); /* superset of or equal to */
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 326 "htmlEnt2Char.l"
out(0x2295); /* circled plus = direct sum */
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 327 "htmlEnt2Char.l"
out(0x2297); /* circled times = vector product */
	YY_BREAK
case 212:
YY_RULE_SETUP
#line 328 "htmlEnt2Char.l"
out(0x22a5); /* up tack = orthogonal to = perpendicular */
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 329 "htmlEnt2Char.l"
out(0x22c5); /* dot operator */
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 330 "htmlEnt2Char.l"
out(0x2308); /* left ceiling = apl upstile */
	YY_BREAK
case 215:
YY_RULE_SETUP
#line 331 "htmlEnt2Char.l"
out(0x2309); /* right ceiling */
	YY_BREAK
case 216:
YY_RULE_SETUP
#line 332 "htmlEnt2Char.l"
out(0x230a); /* left floor = apl downstile */
	YY_BREAK
case 217:
YY_RULE_SETUP
#line 333 "htmlEnt2Char.l"
out(0x230b); /* right floor */
	YY_BREAK
case 218:
YY_RULE_SETUP
#line 334 "htmlEnt2Char.l"
out(0x2329); /* left-pointing angle bracket = bra */
	YY_BREAK
case 219:
YY_RULE_SETUP
#line 335 "htmlEnt2Char.l"
out(0x232a); /* right-pointing angle bracket = ket */
	YY_BREAK
case 220:
YY_RULE_SETUP
#line 336 "htmlEnt2Char.l"
out(0x25ca); /* lozenge */
	YY_BREAK
case 221:
YY_RULE_SETUP
#line 337 "htmlEnt2Char.l"
out(0x2660); /* black spade suit */
	YY_BREAK
case 222:
YY_RULE_SETUP
#line 338 "htmlEnt2Char.l"
out(0x2663); /* black club suit = shamrock */
	YY_BREAK
case 223:
YY_RULE_SETUP
#line 339 "htmlEnt2Char.l"
out(0x2665); /* black heart suit = valentine */
	YY_BREAK
case 224:
YY_RULE_SETUP
#line 340 "htmlEnt2Char.l"
out(0x2666); /* black diamond suit */
	YY_BREAK
case 225:
YY_RULE_SETUP
#line 341 "htmlEnt2Char.l"
out(0x152); /* latin capital ligature OE */
	YY_BREAK
case 226:
YY_RULE_SETUP
#line 342 "htmlEnt2Char.l"
out(0x153); /* latin small ligature oe */
	YY_BREAK
case 227:
YY_RULE_SETUP
#line 343 "htmlEnt2Char.l"
out(0x160); /* latin capital letter S with caron */
	YY_BREAK
case 228:
YY_RULE_SETUP
#line 344 "htmlEnt2Char.l"
out(0x161); /* latin small letter s with caron */
	YY_BREAK
case 229:
YY_RULE_SETUP
#line 345 "htmlEnt2Char.l"
out(0x178); /* latin capital letter Y with diaeresis */
	YY_BREAK
case 230:
YY_RULE_SETUP
#line 346 "htmlEnt2Char.l"
out(0x2c6); /* modifier letter circumflex accent */
	YY_BREAK
case 231:
YY_RULE_SETUP
#line 347 "htmlEnt2Char.l"
out(0x2dc); /* small tilde */
	YY_BREAK
case 232:
YY_RULE_SETUP
#line 348 "htmlEnt2Char.l"
out(0x2002); /* en space */
	YY_BREAK
case 233:
YY_RULE_SETUP
#line 349 "htmlEnt2Char.l"
out(0x2003); /* em space */
	YY_BREAK
case 234:
YY_RULE_SETUP
#line 350 "htmlEnt2Char.l"
out(0x2009); /* thin space */
	YY_BREAK
case 235:
YY_RULE_SETUP
#line 351 "htmlEnt2Char.l"
out(0x200c); /* zero width non-joiner */
	YY_BREAK
case 236:
YY_RULE_SETUP
#line 352 "htmlEnt2Char.l"
out(0x200d); /* zero width joiner */
	YY_BREAK
case 237:
YY_RULE_SETUP
#line 353 "htmlEnt2Char.l"
out(0x200e); /* left-to-right mark */
	YY_BREAK
case 238:
YY_RULE_SETUP
#line 354 "htmlEnt2Char.l"
out(0x200f); /* right-to-left mark */
	YY_BREAK
case 239:
YY_RULE_SETUP
#line 355 "htmlEnt2Char.l"
out(0x2013); /* en dash */
	YY_BREAK
case 240:
YY_RULE_SETUP
#line 356 "htmlEnt2Char.l"
out(0x2014); /* em dash */
	YY_BREAK
case 241:
YY_RULE_SETUP
#line 357 "htmlEnt2Char.l"
out(0x2018); /* left single quotation mark */
	YY_BREAK
case 242:
YY_RULE_SETUP
#line 358 "htmlEnt2Char.l"
out(0x2019); /* right single quotation mark */
	YY_BREAK
case 243:
YY_RULE_SETUP
#line 359 "htmlEnt2Char.l"
out(0x201a); /* single low-9 quotation mark */
	YY_BREAK
case 244:
YY_RULE_SETUP
#line 360 "htmlEnt2Char.l"
out(0x201c); /* left double quotation mark */
	YY_BREAK
case 245:
YY_RULE_SETUP
#line 361 "htmlEnt2Char.l"
out(0x201d); /* right double quotation mark */
	YY_BREAK
case 246:
YY_RULE_SETUP
#line 362 "htmlEnt2Char.l"
out(0x201e); /* double low-9 quotation mark */
	YY_BREAK
case 247:
YY_RULE_SETUP
#line 363 "htmlEnt2Char.l"
out(0x2020); /* dagger */
	YY_BREAK
case 248:
YY_RULE_SETUP
#line 364 "htmlEnt2Char.l"
out(0x2021); /* double dagger */
	YY_BREAK
case 249:
YY_RULE_SETUP
#line 365 "htmlEnt2Char.l"
out(0x2030); /* per mille sign */
	YY_BREAK
case 250:
YY_RULE_SETUP
#line 366 "htmlEnt2Char.l"
out(0x2039); /* single left-pointing angle quotation mark */
	YY_BREAK
case 251:
YY_RULE_SETUP
#line 367 "htmlEnt2Char.l"
out(0x203a); /* single right-pointing angle quotation mark */
	YY_BREAK
case 252:
YY_RULE_SETUP
#line 368 "htmlEnt2Char.l"
out(0x20ac); /* euro sign */
	YY_BREAK
case 253:
YY_RULE_SETUP
#line 370 "htmlEnt2Char.l"
{ sscanf(yytext, "&#x%x", &num);
                          out(num); }
	YY_BREAK
case 254:
YY_RULE_SETUP
#line 372 "htmlEnt2Char.l"
{ sscanf(yytext, "&#X%x", &num);
                          out(num); }
	YY_BREAK
case 255:
YY_RULE_SETUP
#line 375 "htmlEnt2Char.l"
{ sscanf(yytext, "&#%d", &num);
                   out(num); }
	YY_BREAK
case 256:
/* rule 256 can match eol */
YY_RULE_SETUP
#line 378 "htmlEnt2Char.l"
{ if (option.QUIET != TRUE)
                     fprintf(stderr, "invalid entity or unescaped ampersand: %s\n", yytext);
                   if (option.Replace == TRUE)
		     out(option.rChar);
		   else if (option.replace == TRUE)
		     fputs(option.rString, yyout);
		   else if (option.FORCE == TRUE) {}
		   else
                     fprintf(stdout, "&"); /* skip "&" */
                     yyless(1); }
	YY_BREAK
case 257:
/* rule 257 can match eol */
YY_RULE_SETUP
#line 389 "htmlEnt2Char.l"
ECHO;
	YY_BREAK
case 258:
YY_RULE_SETUP
#line 390 "htmlEnt2Char.l"
ECHO;
	YY_BREAK
case 259:
YY_RULE_SETUP
#line 393 "htmlEnt2Char.l"
ECHO;
	YY_BREAK
#line 2960 "<stdout>"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_last_accepting_cpos);
				yy_current_state = (yy_last_accepting_state);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1174 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1174 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1173);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param str a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param bytes the byte buffer to scan
 * @param len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 393 "htmlEnt2Char.l"



void
help ()
{
  fprintf(stdout,
	  "\n"
	  "htmlEnt2Char  --  replaces HTML entities\n"
	  "   options:\n"
	  "     -C <encod>   output encoding, actually supported:\n"
	  "                        l1 lat1 latin1 iso-8859-1\n"
	  "                        u8 utf-8 (default)\n"
	  "     -o <filen>   output filename\n"
	  "     -f           force: skip misspelled entities or\n"
          "                  entities not printable in given charset\n"
	  "                  (see also -r or -R)\n"
	  "     -r <string>  replace unrecognized/unprintable entities\n"
	  "                  by <string>\n"
	  "     -R <num>     replace unrecognized/unprintable entities\n"
	  "                  by a character given as <num>, a Unicode code point\n"
	  "                  Interpretation of <num> follows the C convention:\n"
	  "                  0x.... for hexadecimal numbers\n"
	  "                  0....  for octal numbers\n"
	  "                  ....   for decimal numbers\n"
	  "     -q           quiet: don't report errors, misspelled\n"
	  "                    entities etc.\n"
	  "     -h | -?      print this help and exit\n"
	  "   Other arguments will be read as input filenames.\n"
	  "   If no input files are given, input is read from stdin.\n"
	  "   If no output file is given, the text with replacements\n"
	  "   is written to stdout.\n\n");
  printf("htmlEnt2Char, Sebastian Nagel (wastl@cis.uni-muenchen.de)\n");
  exit(1);
}

int
main (int argc, char **argv)
{
  int c;
  while (1) {
    c = getopt(argc, argv, ":C:o:fqr:R:h?");
    if (c == -1)
      break;
    switch (c) {
      case 'h':
      case '?':
	help();
      case 'q':
	option.QUIET = TRUE;
	break;
      case 'C':
	if ((! strcmp(optarg, "l1")) ||
	    (! strcmp(optarg, "ISO-8859-1")) ||
	    (! strcmp(optarg, "iso-8859-1")) ||
	    (! strcmp(optarg, "lat1")) ||
	    (! strcmp(optarg, "latin1")) ||
	    (! strcmp(optarg, "latin-1")) ||
	    (! strcmp(optarg, "Latin-1")))
	  option.ENCODING = ISO_LATIN_1;
	else if ((! strcmp(optarg, "u8")) ||
		 (! strcmp(optarg, "utf-8")) ||
		 (! strcmp(optarg, "UTF-8")))
	  option.ENCODING = UTF8;
	break;
      case 'o':
	if (optarg != NULL && (yyout = fopen(optarg, "w")) == NULL) {
	  fprintf(stderr, "Can't open %s for writing!\n", optarg);
	  exit(1);
	}
	break;
      case 'f':
	option.FORCE = TRUE;
	break;
      case 'r':
	option.replace = TRUE;
	option.rString = optarg;
	break;
      case 'R':
	option.Replace = TRUE;
	sscanf(optarg, "0x%x", &option.rChar)
	  || sscanf(optarg, "0%o", &option.rChar)
	  || sscanf(optarg, "%u", &option.rChar);
	break;
	
    }
  }
  if (option.ENCODING == ISO_LATIN_1
      && option.rChar >= 0xff)
    {
      fprintf(stderr, "Replacement character not in iso-8859-1!\n");
      exit(1);
    }
  if (optind < argc) /* remaing ARGVs are filenames */
    {
      while (optind < argc)
	{
	  if (argv[optind] != NULL && (yyin = fopen(argv[optind], "r")) == NULL)
	    {
	      fprintf(stderr, "Can't read from %s!\n", argv[optind]);
	      perror(argv[optind]);
	      exit(1);
	    }
	  yylex();
	  optind++;
	}
    }
  else /* default: read yyin/stdin, when no input-files are given */
    {
      yylex();
    }
  return 0;
}

